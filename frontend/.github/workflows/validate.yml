name: Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  validate-code:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate package.json
      run: |
        echo "Validating package.json..."
        npm pkg validate

    - name: Validate dependencies
      run: |
        echo "Validating dependencies..."
        npm ls --depth=0

    - name: Validate scripts
      run: |
        echo "Validating scripts..."
        npm run --silent

    - name: Validate configuration
      run: |
        echo "Validating configuration..."
        node -c next.config.js
        node -c tailwind.config.js
        node -c postcss.config.js

  validate-syntax:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate JavaScript syntax
      run: |
        echo "Validating JavaScript syntax..."
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./.next/*" -exec node -c {} \;

    - name: Validate TypeScript syntax
      run: |
        echo "Validating TypeScript syntax..."
        npx tsc --noEmit || true

    - name: Validate JSON syntax
      run: |
        echo "Validating JSON syntax..."
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./.next/*" -exec jq . {} \; > /dev/null

    - name: Validate YAML syntax
      run: |
        echo "Validating YAML syntax..."
        find . -name "*.yml" -o -name "*.yaml" -not -path "./node_modules/*" -not -path "./.next/*" -exec yamllint {} \; || true

  validate-formatting:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate code formatting
      run: |
        echo "Validating code formatting..."
        npm run lint

    - name: Validate Prettier formatting
      run: |
        echo "Validating Prettier formatting..."
        npx prettier --check . || true

    - name: Validate ESLint rules
      run: |
        echo "Validating ESLint rules..."
        npx eslint . --ext .js,.jsx,.ts,.tsx || true

  validate-structure:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Validate file structure
      run: |
        echo "Validating file structure..."
        
        # Check required directories
        required_dirs=("components" "pages" "styles" "utils" "services" "contexts")
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "❌ Required directory missing: $dir"
            exit 1
          else
            echo "✅ Directory exists: $dir"
          fi
        done
        
        # Check required files
        required_files=("package.json" "next.config.js" "tailwind.config.js" "postcss.config.js" "pages/_app.js" "pages/index.js")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          else
            echo "✅ File exists: $file"
          fi
        done

    - name: Validate component structure
      run: |
        echo "Validating component structure..."
        
        # Check component files
        find components -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | while read -r file; do
          if [ -f "$file" ]; then
            echo "✅ Component file: $file"
          fi
        done

    - name: Validate page structure
      run: |
        echo "Validating page structure..."
        
        # Check page files
        find pages -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | while read -r file; do
          if [ -f "$file" ]; then
            echo "✅ Page file: $file"
          fi
        done

  validate-content:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Validate README
      run: |
        echo "Validating README..."
        if [ -f "README.md" ]; then
          echo "✅ README.md exists"
          
          # Check for required sections
          required_sections=("## Getting Started" "## Installation" "## Usage" "## Contributing" "## License")
          for section in "${required_sections[@]}"; do
            if grep -q "$section" README.md; then
              echo "✅ README contains: $section"
            else
              echo "⚠️ README missing: $section"
            fi
          done
        else
          echo "❌ README.md missing"
          exit 1
        fi

    - name: Validate CHANGELOG
      run: |
        echo "Validating CHANGELOG..."
        if [ -f "CHANGELOG.md" ]; then
          echo "✅ CHANGELOG.md exists"
          
          # Check for required sections
          required_sections=("## [Unreleased]" "## [1.0.0]" "## Added" "## Changed" "## Fixed")
          for section in "${required_sections[@]}"; do
            if grep -q "$section" CHANGELOG.md; then
              echo "✅ CHANGELOG contains: $section"
            else
              echo "⚠️ CHANGELOG missing: $section"
            fi
          done
        else
          echo "❌ CHANGELOG.md missing"
          exit 1
        fi

    - name: Validate LICENSE
      run: |
        echo "Validating LICENSE..."
        if [ -f "LICENSE" ]; then
          echo "✅ LICENSE exists"
        else
          echo "❌ LICENSE missing"
          exit 1
        fi

    - name: Validate .gitignore
      run: |
        echo "Validating .gitignore..."
        if [ -f ".gitignore" ]; then
          echo "✅ .gitignore exists"
        else
          echo "❌ .gitignore missing"
          exit 1
        fi

  validate-security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate security configuration
      run: |
        echo "Validating security configuration..."
        
        # Check for security files
        security_files=(".eslintrc.json" ".prettierrc" ".editorconfig" ".nvmrc")
        for file in "${security_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Security file exists: $file"
          else
            echo "⚠️ Security file missing: $file"
          fi
        done

    - name: Validate security dependencies
      run: |
        echo "Validating security dependencies..."
        npm audit --audit-level moderate || true

    - name: Validate environment variables
      run: |
        echo "Validating environment variables..."
        
        # Check for environment files
        if [ -f ".env.example" ]; then
          echo "✅ .env.example exists"
        else
          echo "⚠️ .env.example missing"
        fi
        
        # Check for sensitive data in code
        if grep -r "password\|secret\|key\|token" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . | grep -v "node_modules" | grep -v ".next" | grep -v "test" | grep -v "spec"; then
          echo "⚠️ Potential sensitive data found in code"
        else
          echo "✅ No sensitive data found in code"
        fi

  validate-performance:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate performance configuration
      run: |
        echo "Validating performance configuration..."
        
        # Check for performance files
        performance_files=("next.config.js" "tailwind.config.js" "postcss.config.js")
        for file in "${performance_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Performance file exists: $file"
          else
            echo "⚠️ Performance file missing: $file"
          fi
        done

    - name: Validate bundle size
      run: |
        echo "Validating bundle size..."
        npm run build
        
        # Check bundle size
        if [ -d ".next" ]; then
          bundle_size=$(du -sh .next | cut -f1)
          echo "Bundle size: $bundle_size"
        else
          echo "❌ Build failed"
          exit 1
        fi

  validate-accessibility:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate accessibility configuration
      run: |
        echo "Validating accessibility configuration..."
        
        # Check for accessibility files
        accessibility_files=("ACCESSIBILITY.md" ".eslintrc.json")
        for file in "${accessibility_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Accessibility file exists: $file"
          else
            echo "⚠️ Accessibility file missing: $file"
          fi
        done

    - name: Validate accessibility code
      run: |
        echo "Validating accessibility code..."
        
        # Check for accessibility attributes
        if grep -r "aria-\|role=\|tabindex=" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . | grep -v "node_modules" | grep -v ".next" | grep -v "test" | grep -v "spec"; then
          echo "✅ Accessibility attributes found in code"
        else
          echo "⚠️ No accessibility attributes found in code"
        fi

  validate-documentation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Validate documentation structure
      run: |
        echo "Validating documentation structure..."
        
        # Check for documentation files
        doc_files=("README.md" "CHANGELOG.md" "CONTRIBUTING.md" "DEVELOPMENT.md" "TESTING.md" "TROUBLESHOOTING.md" "SECURITY.md" "PERFORMANCE.md" "ACCESSIBILITY.md" "MAINTENANCE.md" "API.md" "DEPLOYMENT.md")
        for file in "${doc_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Documentation file exists: $file"
          else
            echo "⚠️ Documentation file missing: $file"
          fi
        done

    - name: Validate documentation content
      run: |
        echo "Validating documentation content..."
        
        # Check for broken links in README
        if [ -f "README.md" ]; then
          echo "Checking README for broken links..."
          # Add link checking logic here
        fi

  validate-workflows:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Validate GitHub workflows
      run: |
        echo "Validating GitHub workflows..."
        
        # Check for workflow files
        workflow_files=("ci.yml" "deploy.yml" "security.yml" "performance.yml" "accessibility.yml" "backup.yml" "cleanup.yml" "monitoring.yml" "notifications.yml" "status.yml" "update.yml" "validate.yml")
        for file in "${workflow_files[@]}"; do
          if [ -f ".github/workflows/$file" ]; then
            echo "✅ Workflow file exists: $file"
          else
            echo "⚠️ Workflow file missing: $file"
          fi
        done

    - name: Validate workflow syntax
      run: |
        echo "Validating workflow syntax..."
        
        # Check workflow syntax
        find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
          if [ -f "$file" ]; then
            echo "Validating: $file"
            # Add workflow validation logic here
          fi
        done

  validate-notification:
    runs-on: ubuntu-latest
    needs: [validate-code, validate-syntax, validate-formatting, validate-structure, validate-content, validate-security, validate-performance, validate-accessibility, validate-documentation, validate-workflows]
    if: always()

    steps:
    - name: Notify validation team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#validation'
        text: |
          🔍 Validation completed for ${{ github.ref_name }}
          - Code: ${{ needs.validate-code.result }}
          - Syntax: ${{ needs.validate-syntax.result }}
          - Formatting: ${{ needs.validate-formatting.result }}
          - Structure: ${{ needs.validate-structure.result }}
          - Content: ${{ needs.validate-content.result }}
          - Security: ${{ needs.validate-security.result }}
          - Performance: ${{ needs.validate-performance.result }}
          - Accessibility: ${{ needs.validate-accessibility.result }}
          - Documentation: ${{ needs.validate-documentation.result }}
          - Workflows: ${{ needs.validate-workflows.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
