name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  security-audit:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      run: npx snyk test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Upload Snyk results
      uses: actions/upload-artifact@v3
      with:
        name: snyk-results
        path: snyk-results.json

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Dependency Review
      uses: actions/dependency-review-action@v3

  codeql:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  security-headers:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: npm start &
      env:
        NODE_ENV: production

    - name: Wait for application to start
      run: npx wait-on http://localhost:3000

    - name: Check security headers
      run: |
        curl -I http://localhost:3000 | grep -i "x-frame-options\|x-content-type-options\|x-xss-protection\|strict-transport-security"

  vulnerability-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  secrets-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check licenses
      run: npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense'

  security-notification:
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-review, codeql, security-headers, vulnerability-scan, secrets-scan, license-check]
    if: always()

    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#security'
        text: |
          Security scan completed for ${{ github.ref_name }}
          - Security Audit: ${{ needs.security-audit.result }}
          - Dependency Review: ${{ needs.dependency-review.result }}
          - CodeQL: ${{ needs.codeql.result }}
          - Security Headers: ${{ needs.security-headers.result }}
          - Vulnerability Scan: ${{ needs.vulnerability-scan.result }}
          - Secrets Scan: ${{ needs.secrets-scan.result }}
          - License Check: ${{ needs.license-check.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
